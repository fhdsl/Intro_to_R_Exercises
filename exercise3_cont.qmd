---
title: "Optional: Exercise 3 continued"
format: html
editor: visual
---

To clear the environment, run the following code chunk below:

```{r}
rm(list = ls())
```

## Subsetting vectors continued

Another use of subsetting is to modify part of a vector that satisfy a particular criteria. Instead of having the bracket `[ ]` notation on the right hand side of the equation, if it is on the left hand side of the equation, then we can modify a subset of the vector.

To demonstrate it, let's create a new variable, `medicaid_eligible` so that it is identical as `age`.

```{r}
age = c(25, 45, 67, 85, 90)
medicaid_eligible = age
```

We can modify `medicaid_eligible` so that all elements of `medicaid_eligible` that is equal or less than 65 is assigned to a value of 0. Notice we are assigning a single value to a subset of a vector, which means that the entire subsetted vector will be assigned to that single value.

```{r}
medicaid_eligible[medicaid_eligible <= 65] = 0
medicaid_eligible
```

Now, modify `medicaid_eligible` so that all elements of `medicaid_eligible` that is greater than 65 is assigned to a value of 1.

```{r}

```

You can also assign a subset of a vector to another vector, but you need to make sure that the *vector lengths are the same.* For example:

```{r}
staff = c("chris", "christine", "kasper", "chelsey", "doug")
```

Let's subset to `staff` that starts with "c":

```{r}
staff[startsWith(staff, "c")]
```

And assign it a vector:

```{r}
staff[startsWith(staff, "c")] = c("Senior", "Junior", "Intern")
```

```{r}
staff
```

We had no problem because the vector lengths were the same between the subsetted vector and the assigned vector. But what happens if the vector lengths were different?

```{r}
staff = c("chris", "christine", "kasper", "chelsey", "doug")
staff[startsWith(staff, "c")] = c("Senior", "Junior") 
staff
```

We subsetted to 3 elements, and assigned it to a vector length 2, what happened?!

## Loading data in

We load in a dataframe via the `read.csv()` function. This is a common function to use for loading in Common Separated Value spreadsheets. We specify the directory of the file relative to where our project is.

The spreadsheet `"scda2022_oldest_1.csv"` is a simulation of clinical trials data based on CDISC standards. Here is [where the data came from.](https://github.com/insightsengineering/scda)

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
clinical_df = read.csv("scda2022_oldest_1.csv")
```

## What's in the dataframe?

A first step of data analysis is to explore what's in the dataframe, briefly. Use `View()`, `dim()`, `colnames()` to get a sense of what is in the dataframe.

```{r}

```

## What do the rows represent?

Then, let's think about what each row represents in this dataframe: clearly it's about a patient. But is a patient recorded repeatedly, say, from multiple visits or measurements, or are these unique measurements? We can figure this out by asking whether the `SUBJID` column contains repeated patient IDs, or whether they are all unique.

The `unique()` function is helpful here. It takes in a vector and returns another vector without only unique elements from the input.

First, use the `length()` function on `SUBJID` column to see the number of patient subject IDs recorded.

```{r}

```

Then, use `unique()` function on `SUBJID` column to get the unique patients in a vector. Then, use `length()` on `unique()` of `SUBJID` in a nested way such as `length(unique(your_vector_here))`. This gives you the number of unique patients. How do they compare?

```{r}

```

So, does each row represents an unique patient?

## Summary statistics

Conduct summary statistics analysis (such as `mean()`, `max()`, `min()`, `table()`) on columns `ARM` (Study Arm), `BMRKR1` (Outcome Biomarker 1), and `BMRKR2` (Outcome Biomarker 2):

```{r}

```

## Outcome analysis

We want to compare `BMRKR1` (Outcome Biomarker 1) between each of the three study arms, as well as `BMRKR2` (Outcome Biomarker 2).

Filter `clinical_df` to each of the three study arm conditions. That is, use `filter()` on `clinical_df` so that it filters for rows that only has values of "A: Drug X" and store the resulting dataframe as a variable. Do it again for "B: Placebo", and "C: Combination".

```{r}

```

Then, compare the summary statistics of `BMRKR1` bewteen the three study arm conditions. Do the same for `BMRKR2`.

```{r}

```
